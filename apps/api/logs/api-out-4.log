2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Usage: bun run [flags] <file or script>
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Flags:
2025-09-24T20:21:39:       --silent                        Don't print the script command
2025-09-24T20:21:39:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:21:39:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:21:39:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:21:39:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:21:39:       --watch                         Automatically restart the process on file change
2025-09-24T20:21:39:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:21:39:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:21:39:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:21:39:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:21:39:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:21:39:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:21:39:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:21:39:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:21:39:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:21:39:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:21:39:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:21:39:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:21:39:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:21:39:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:21:39:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:21:39:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:21:39:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:21:39:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:21:39:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:21:39:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:21:39:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:21:39:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:21:39:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:21:39:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:21:39:       --title=<val>                   Set the process title
2025-09-24T20:21:39:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:21:39:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:21:39:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:21:39:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:21:39:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:21:39:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:21:39:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:21:39:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:21:39:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:21:39: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:21:39:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:21:39:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:21:39:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:21:39:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:21:39:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:21:39:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:21:39:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:21:39:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:21:39:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:21:39:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:21:39:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:21:39:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:21:39:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:21:39:   -h, --help                          Display this menu and exit
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Examples:
2025-09-24T20:21:39:   Run a JavaScript or TypeScript file
2025-09-24T20:21:39:   bun run ./index.js
2025-09-24T20:21:39:   bun run ./index.tsx
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   Run a package.json script
2025-09-24T20:21:39:   bun run dev
2025-09-24T20:21:39:   bun run lint
2025-09-24T20:21:39: 
2025-09-24T20:21:39: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:21:39: 
2025-09-24T20:21:39: package.json scripts (5 found):
2025-09-24T20:21:39:   $ bun run dev
2025-09-24T20:21:39:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run start
2025-09-24T20:21:39:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run build
2025-09-24T20:21:39:     tsc -p tsconfig.json
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run typecheck
2025-09-24T20:21:39:     tsc -p tsconfig.json --noEmit
2025-09-24T20:21:39: 
2025-09-24T20:21:39:   $ bun run lint
2025-09-24T20:21:39:     echo 'no lint yet'
2025-09-24T20:21:39: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54:       --extension-order=<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Usage: bun run [flags] <file or script>
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Flags:
2025-09-24T20:22:54:       --silent                        Don't print the script command
2025-09-24T20:22:54:       --elide-lines=<val>             Number of lines of script output shown when using --filter (default: 10). Set to 0 to show all lines.
2025-09-24T20:22:54:   -F, --filter=<val>                  Run a script in all workspace packages matching the pattern
2025-09-24T20:22:54:   -b, --bun                           Force a script or package to use Bun's runtime instead of Node.js (via symlinking node)
2025-09-24T20:22:54:       --shell=<val>                   Control the shell used for package.json scripts. Supports either 'bun' or 'system'
2025-09-24T20:22:54:       --watch                         Automatically restart the process on file change
2025-09-24T20:22:54:       --hot                           Enable auto reload in the Bun runtime, test runner, or bundler
2025-09-24T20:22:54:       --no-clear-screen               Disable clearing the terminal screen on reload when --hot or --watch is enabled
2025-09-24T20:22:54:       --smol                          Use less memory, but run garbage collection more often
2025-09-24T20:22:54:   -r, --preload=<val>                 Import a module before other modules are loaded
2025-09-24T20:22:54:       --require=<val>                 Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --import=<val>                  Alias of --preload, for Node.js compatibility
2025-09-24T20:22:54:       --inspect=<val>                 Activate Bun's debugger
2025-09-24T20:22:54:       --inspect-wait=<val>            Activate Bun's debugger, wait for a connection before executing
2025-09-24T20:22:54:       --inspect-brk=<val>             Activate Bun's debugger, set breakpoint on first line of code and wait
2025-09-24T20:22:54:       --if-present                    Exit without an error if the entrypoint does not exist
2025-09-24T20:22:54:       --no-install                    Disable auto install in the Bun runtime
2025-09-24T20:22:54:       --install=<val>                 Configure auto-install behavior. One of "auto" (default, auto-installs when no node_modules), "fallback" (missing packages only), "force" (always).
2025-09-24T20:22:54:   -i                                  Auto-install dependencies during execution. Equivalent to --install=fallback.
2025-09-24T20:22:54:   -e, --eval=<val>                    Evaluate argument as a script
2025-09-24T20:22:54:   -p, --print=<val>                   Evaluate argument as a script and print the result
2025-09-24T20:22:54:       --prefer-offline                Skip staleness checks for packages in the Bun runtime and resolve from disk
2025-09-24T20:22:54:       --prefer-latest                 Use the latest matching versions of packages in the Bun runtime, always checking npm
2025-09-24T20:22:54:       --port=<val>                    Set the default port for Bun.serve
2025-09-24T20:22:54:       --conditions=<val>              Pass custom conditions to resolve
2025-09-24T20:22:54:       --fetch-preconnect=<val>        Preconnect to a URL while code is loading
2025-09-24T20:22:54:       --max-http-header-size=<val>    Set the maximum size of HTTP headers in bytes. Default is 16KiB
2025-09-24T20:22:54:       --dns-result-order=<val>        Set the default order of DNS lookup results. Valid orders: verbatim (default), ipv4first, ipv6first
2025-09-24T20:22:54:       --expose-gc                     Expose gc() on the global object. Has no effect on Bun.gc().
2025-09-24T20:22:54:       --no-deprecation                Suppress all reporting of the custom deprecation.
2025-09-24T20:22:54:       --throw-deprecation             Determine whether or not deprecation warnings result in errors.
2025-09-24T20:22:54:       --title=<val>                   Set the process title
2025-09-24T20:22:54:       --zero-fill-buffers             Boolean to force Buffer.allocUnsafe(size) to be zero-filled.
2025-09-24T20:22:54:       --redis-preconnect              Preconnect to $REDIS_URL at startup
2025-09-24T20:22:54:       --sql-preconnect                Preconnect to PostgreSQL at startup
2025-09-24T20:22:54:       --no-addons                     Throw an error if process.dlopen is called, and disable export condition "node-addons"
2025-09-24T20:22:54:       --unhandled-rejections=<val>    One of "strict", "throw", "warn", "none", or "warn-with-error-code"
2025-09-24T20:22:54:       --console-depth=<val>           Set the default depth for console.log object inspection (default: 2)
2025-09-24T20:22:54:       --main-fields=<val>             Main fields to lookup in package.json. Defaults to --target dependent
2025-09-24T20:22:54:       --preserve-symlinks             Preserve symlinks when resolving files
2025-09-24T20:22:54:       --preserve-symlinks-main        Preserve symlinks when resolving the main entry point
2025-09-24T20:22:54: =<val>         Defaults to: .tsx,.ts,.jsx,.js,.json
2025-09-24T20:22:54:       --tsconfig-override=<val>       Specify custom tsconfig.json. Default <d>$cwd<r>/tsconfig.json
2025-09-24T20:22:54:   -d, --define=<val>                  Substitute K:V while parsing, e.g. --define process.env.NODE_ENV:"development". Values are parsed as JSON.
2025-09-24T20:22:54:       --drop=<val>                    Remove function calls, e.g. --drop=console removes all console.* calls.
2025-09-24T20:22:54:   -l, --loader=<val>                  Parse files with .ext:loader, e.g. --loader .js:jsx. Valid loaders: js, jsx, ts, tsx, json, toml, text, file, wasm, napi
2025-09-24T20:22:54:       --no-macros                     Disable macros from being executed in the bundler, transpiler and runtime
2025-09-24T20:22:54:       --jsx-factory=<val>             Changes the function called when compiling JSX elements using the classic JSX runtime
2025-09-24T20:22:54:       --jsx-fragment=<val>            Changes the function called when compiling JSX fragments
2025-09-24T20:22:54:       --jsx-import-source=<val>       Declares the module specifier to be used for importing the jsx and jsxs factory functions. Default: "react"
2025-09-24T20:22:54:       --jsx-runtime=<val>             "automatic" (default) or "classic"
2025-09-24T20:22:54:       --ignore-dce-annotations        Ignore tree-shaking annotations such as @__PURE__
2025-09-24T20:22:54:       --env-file=<val>                Load environment variables from the specified file(s)
2025-09-24T20:22:54:       --cwd=<val>                     Absolute path to resolve files & entry points from. This just changes the process' cwd.
2025-09-24T20:22:54:   -c, --config=<val>                  Specify path to Bun config file. Default <d>$cwd<r>/bunfig.toml
2025-09-24T20:22:54:   -h, --help                          Display this menu and exit
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Examples:
2025-09-24T20:22:54:   Run a JavaScript or TypeScript file
2025-09-24T20:22:54:   bun run ./index.js
2025-09-24T20:22:54:   bun run ./index.tsx
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   Run a package.json script
2025-09-24T20:22:54:   bun run dev
2025-09-24T20:22:54:   bun run lint
2025-09-24T20:22:54: 
2025-09-24T20:22:54: Full documentation is available at https://bun.com/docs/cli/run
2025-09-24T20:22:54: 
2025-09-24T20:22:54: package.json scripts (5 found):
2025-09-24T20:22:54:   $ bun run dev
2025-09-24T20:22:54:     bun --env-file ../../env/.env --hot src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run start
2025-09-24T20:22:54:     bun --env-file ../../env/.env run src/index.ts
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run build
2025-09-24T20:22:54:     tsc -p tsconfig.json
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run typecheck
2025-09-24T20:22:54:     tsc -p tsconfig.json --noEmit
2025-09-24T20:22:54: 
2025-09-24T20:22:54:   $ bun run lint
2025-09-24T20:22:54:     echo 'no lint yet'
2025-09-24T20:22:54: 
